# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import database_pb2 as database__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in database_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTable = channel.unary_unary(
                '/DatabaseService/CreateTable',
                request_serializer=database__pb2.CreateTableRequest.SerializeToString,
                response_deserializer=database__pb2.CreateTableResponse.FromString,
                _registered_method=True)
        self.DeleteTable = channel.unary_unary(
                '/DatabaseService/DeleteTable',
                request_serializer=database__pb2.DeleteTableRequest.SerializeToString,
                response_deserializer=database__pb2.DeleteTableResponse.FromString,
                _registered_method=True)
        self.CreateRow = channel.unary_unary(
                '/DatabaseService/CreateRow',
                request_serializer=database__pb2.CreateRowRequest.SerializeToString,
                response_deserializer=database__pb2.CreateRowResponse.FromString,
                _registered_method=True)
        self.EditRow = channel.unary_unary(
                '/DatabaseService/EditRow',
                request_serializer=database__pb2.EditRowRequest.SerializeToString,
                response_deserializer=database__pb2.EditRowResponse.FromString,
                _registered_method=True)
        self.GetAllRows = channel.unary_unary(
                '/DatabaseService/GetAllRows',
                request_serializer=database__pb2.GetAllRowsRequest.SerializeToString,
                response_deserializer=database__pb2.GetAllRowsResponse.FromString,
                _registered_method=True)
        self.TableDifference = channel.unary_unary(
                '/DatabaseService/TableDifference',
                request_serializer=database__pb2.TableDifferenceRequest.SerializeToString,
                response_deserializer=database__pb2.TableDifferenceResponse.FromString,
                _registered_method=True)
        self.SaveDatabase = channel.unary_unary(
                '/DatabaseService/SaveDatabase',
                request_serializer=database__pb2.SaveDatabaseRequest.SerializeToString,
                response_deserializer=database__pb2.SaveDatabaseResponse.FromString,
                _registered_method=True)
        self.LoadDatabase = channel.unary_unary(
                '/DatabaseService/LoadDatabase',
                request_serializer=database__pb2.LoadDatabaseRequest.SerializeToString,
                response_deserializer=database__pb2.LoadDatabaseResponse.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTable(self, request, context):
        """Створення таблиці
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTable(self, request, context):
        """Видалення таблиці
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRow(self, request, context):
        """Створення рядка
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditRow(self, request, context):
        """Редагування рядка
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllRows(self, request, context):
        """Отримати всі рядки
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TableDifference(self, request, context):
        """Порівняння таблиць
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveDatabase(self, request, context):
        """Збереження та завантаження бази даних
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTable,
                    request_deserializer=database__pb2.CreateTableRequest.FromString,
                    response_serializer=database__pb2.CreateTableResponse.SerializeToString,
            ),
            'DeleteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTable,
                    request_deserializer=database__pb2.DeleteTableRequest.FromString,
                    response_serializer=database__pb2.DeleteTableResponse.SerializeToString,
            ),
            'CreateRow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRow,
                    request_deserializer=database__pb2.CreateRowRequest.FromString,
                    response_serializer=database__pb2.CreateRowResponse.SerializeToString,
            ),
            'EditRow': grpc.unary_unary_rpc_method_handler(
                    servicer.EditRow,
                    request_deserializer=database__pb2.EditRowRequest.FromString,
                    response_serializer=database__pb2.EditRowResponse.SerializeToString,
            ),
            'GetAllRows': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllRows,
                    request_deserializer=database__pb2.GetAllRowsRequest.FromString,
                    response_serializer=database__pb2.GetAllRowsResponse.SerializeToString,
            ),
            'TableDifference': grpc.unary_unary_rpc_method_handler(
                    servicer.TableDifference,
                    request_deserializer=database__pb2.TableDifferenceRequest.FromString,
                    response_serializer=database__pb2.TableDifferenceResponse.SerializeToString,
            ),
            'SaveDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveDatabase,
                    request_deserializer=database__pb2.SaveDatabaseRequest.FromString,
                    response_serializer=database__pb2.SaveDatabaseResponse.SerializeToString,
            ),
            'LoadDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadDatabase,
                    request_deserializer=database__pb2.LoadDatabaseRequest.FromString,
                    response_serializer=database__pb2.LoadDatabaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/CreateTable',
            database__pb2.CreateTableRequest.SerializeToString,
            database__pb2.CreateTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/DeleteTable',
            database__pb2.DeleteTableRequest.SerializeToString,
            database__pb2.DeleteTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/CreateRow',
            database__pb2.CreateRowRequest.SerializeToString,
            database__pb2.CreateRowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/EditRow',
            database__pb2.EditRowRequest.SerializeToString,
            database__pb2.EditRowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllRows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/GetAllRows',
            database__pb2.GetAllRowsRequest.SerializeToString,
            database__pb2.GetAllRowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TableDifference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/TableDifference',
            database__pb2.TableDifferenceRequest.SerializeToString,
            database__pb2.TableDifferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/SaveDatabase',
            database__pb2.SaveDatabaseRequest.SerializeToString,
            database__pb2.SaveDatabaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DatabaseService/LoadDatabase',
            database__pb2.LoadDatabaseRequest.SerializeToString,
            database__pb2.LoadDatabaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
